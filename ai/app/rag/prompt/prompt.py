def load_choice_prompt(choice: int) -> str:
    return f"""
너는 정보처리기사 객관식 문제(TYPE_CHOICE)를 만드는 AI야. 반드시 JSON 배열로만 응답해야 해.

지시사항:
1. 총 {choice}개의 TYPE_CHOICE 문제를 정확히 숫자를 맞춰서 생성해야 한다.
2. 각 문제는 다음 필드를 포함해야 한다:
  - type: "TYPE_CHOICE"
  - question: 문제 내용
  - explanation: 정답 도출에 반드시 필요한 핵심 설명 내용을 포함한다.
    - 단, 문제 본문(question)에 이미 설명이 포함되어 있어 정답 도출이 가능한 경우에는 반드시 null로 설정한다.
    - 예: "TCP에 대한 설명으로 옳은 것은?"처럼 문제에 핵심 설명이 포함된 경우에는 explanation을 null로 비워야 한다.
    - 예: "다음 설명에 해당하는 계층은?"처럼 question이 일반적인 형태일 경우, 핵심 설명은 반드시 explanation에 포함되어야 한다.
  - option: 보기 4개 (문자열 배열)
  - answer: 정답 번호 (1~4 사이 문자열)
  - comment: 해설 (최소 3문장 이상)
3. 반드시 JSON 배열만 응답하라. JSON 외의 주석, 설명, 자연어 문장은 절대 포함하지 마라.
4. 예시는 다음과 같다:

[
  {{
    "type":"TYPE_CHOICE",
    "question": "다음 중 객체 지향 프로그래밍(OOP)의 주요 특징이 아닌 것은 무엇인가?",
    "explanation": null,
    "option": ["캡슐화", "상속", "다형성", "구조적 프로그래밍"],
    "answer": "4",
    "comment": "객체 지향 프로그래밍(OOP)은 프로그램을 객체라는 단위로 나누고, 각 객체가 책임을 가지는 구조입니다. 주요 특징으로는 '캡슐화', '상속', '다형성'이 있으며, 이는 재사용성과 확장성, 유지보수성을 높여줍니다. 반면 '구조적 프로그래밍'은 함수와 절차 중심의 방식으로, 절차지향 언어에서 주로 사용하는 개념이며 객체 지향의 특징이 아닙니다."
  }},
  {{
    "type":"TYPE_CHOICE",
    "question": "다음과 같은 특징을 가진 소프트웨어 구성 요소는 무엇인가?",
    "explanation": ["상호 독립적으로 작동하며 유지 보수성을 높인다", "각기 다른 기능을 수행하는 프로그램 코드의 그룹이다", "재사용이 용이하여 개발 속도를 향상시킬 수 있다."],
    "option": ["함수", "클래스", "모듈", "프레임워크"],
    "answer": "3",
    "comment": "모듈(Module)은 기능 단위로 코드를 분리하여 독립적으로 관리하고 재사용할 수 있는 코드 집합입니다. 함수나 클래스는 모듈 내부에 포함될 수 있는 작은 단위이고, 프레임워크는 더 큰 구조로서 전체 개발 방식에 영향을 줍니다. 모듈은 특히 유지 보수성과 개발 효율성을 높이는 데 중요한 역할을 합니다."
  }}
]

5. 지시 위반 시 응답은 실패로 간주된다. 문제 수가 맞지 않으면 맞도록 다시 조정하라.
"""

def load_oxshort_prompt(ox: int, short: int) -> str:
    total = ox + short
    return f"""
너는 정보처리기사 이론을 바탕으로 OX 및 주관식 문제(TYPE_OX, TYPE_SHORT)를 만드는 AI야. 반드시 JSON 배열로만 응답해야 해.

지시사항:
1. 총 {total}개의 문제를 다음과 같이 정확히 숫자를 맞춰서 구성하라:
  - TYPE_OX 문제: {ox}개
  - TYPE_SHORT 문제: {short}개
2. 각 문제는 다음 필드를 포함해야 한다:
  - type: "TYPE_OX" 또는 "TYPE_SHORT"
  - question: 문제 내용
  - explanation: 정답 도출에 반드시 필요한 핵심 설명 내용을 포함한다.
    - 단, 문제 본문(question)에 이미 설명이 포함되어 있어 정답을 유도할 수 있는 경우에는 반드시 null로 설정한다.
    - 예: "TCP는 연결지향형 프로토콜이다. (O/X)"처럼 문제 자체에 설명이 들어가 있는 경우 explanation은 null이어야 한다.
    - 예: "다음 설명에 해당하는 계층은?"처럼 question이 일반적인 형태일 경우, 핵심 설명은 반드시 explanation에 포함되어야 한다.
    - 즉, explanation은 문제를 이해하고 정답을 도출하는 데 **반드시 필요한 경우에만 사용**하며, 설명 없이도 풀 수 있는 문제는 null로 설정한다.
  - answer: 정답 (OX는 'O' 또는 'X', 주관식은 단답형 문자열)
  - comment: 해설 (최소 3문장 이상)
3. 반드시 JSON 배열만 응답하라. JSON 외의 주석, 설명, 자연어 문장은 절대 포함하지 마라.
4. 예시는 다음과 같다:

[
  {{
    "type":"TYPE_OX",
    "question": "OS에서 프로세스 상태 전이 중 'Ready' 상태에서는 'Blocked'로 바로 전이될 수 없다.",
    "explanation": null
    "answer": "O",
    "comment": "'Ready' 상태는 CPU 할당을 기다리는 상태이고, 'Blocked' 상태는 입출력(I/O) 완료 등 외부 자원을 기다리는 상태입니다. 운영체제의 프로세스 스케줄링 원칙상 'Ready → Blocked'로는 직접 전이할 수 없으며, 반드시 'Running' 상태를 거쳐야 합니다. 즉, 프로세스는 CPU를 사용 중일 때 입출력 대기로 인해 Blocked 상태로 전이되는 것이 일반적입니다."
  }},
  {{
    "type": "TYPE_OX",
    "question": "다음 설명에 해당하는 계층은 네트워크 계층이다. (O/X)",
    "explanation": [
      "데이터를 목적지까지 전달하기 위해 최적 경로를 설정하고, 논리 주소(IP)를 사용해 데이터를 전달하는 계층이다."
    ],
    "answer": "O",
    "comment": "네트워크 계층은 IP 주소를 기반으로 최적 경로를 설정하고 패킷을 전달하는 역할을 합니다. 라우팅, 주소 지정 등의 기능을 통해 서로 다른 네트워크 간 통신을 가능하게 합니다. 이는 OSI 7계층의 세 번째 계층입니다."
  }},
  {{
    "type": "TYPE_SHORT",
    "question": "운영체제에서 CPU가 할당되기를 기다리는 상태를 무엇이라고 하는가?",
    "explanation": null,
    "answer": "Ready",
    "comment": "Ready 상태는 프로세스가 실행 가능한 상태이지만 아직 CPU를 할당받지 못한 대기 상태입니다. 스케줄러에 의해 선택되면 Running 상태로 전이됩니다. 이는 프로세스 상태 전이에서 중요한 개념입니다."
  }},
  {{
    "type": "TYPE_SHORT",
    "question": "다음 설명에 해당하는 OSI 계층은?",
    "explanation": ["데이터를 목적지까지 전달하기 위해 최적의 경로를 설정하고, IP 주소 등 논리적 주소를 이용해 패킷을 전달한다."],
    "answer": "네트워크 계층",
    "comment": "네트워크 계층은 IP 주소 기반으로 패킷을 라우팅하며, 최적 경로를 계산해 데이터를 전달합니다. 서로 다른 네트워크 간의 통신을 가능하게 하며, 인터넷 구조의 핵심 계층 중 하나입니다. OSI 7계층의 세 번째 계층입니다."
  }}
]

5. 지시 위반 시 응답은 실패로 간주된다.
"""
