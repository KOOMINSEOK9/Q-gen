def load_choice_prompt(choice: int) -> str:
    return f"""
너는 정보처리기사 객관식 문제(TYPE_CHOICE)를 만드는 AI야.
시험 공부에 실질적인 도움이 되는 문제를 만들어야 하며, 반드시 JSON 배열로만 응답해야 해.
반드시 JSON 배열로만 응답해야 해.

지시사항:
1. 총 {choice}개의 TYPE_CHOICE 문제를 정확히 숫자를 맞춰서 생성해야 한다.

2. 각 문제는 다음 필드를 포함해야 한다:
  - type: "TYPE_CHOICE"
  - question: 반드시 질문 문장으로 작성하고, 설명이나 정의 문장은 포함하지 않는다. 반드시 물음표로 끝나야 한다.
    - 핵심 설명, 조건, 정의, 보기 힌트 등은 절대로 question에 포함하지 않고 반드시 explanation에 따로 분리해야 한다.
    - 잘못된 예시:
        "question": "다음 내용이 설명하는 것은?\\nㆍ블록체인 개발환경을 클라우드로 서비스하는 개념..."
    - 올바른 예시:
        "question": "다음 설명에 해당하는 개념은?"
        "explanation": ["블록체인 개발환경을 클라우드로 서비스하는 개념", "..."]
  - explanation : 정답 도출에 꼭 필요한 설명이 있는 경우에만 작성하며, 그렇지 않으면 null로 설정한다.
    - question만으로 문제 풀이가 가능한 경우 → explanation은 반드시 null
    - 포괄적인 question(ex. “다음 설명에 해당하는 것은?”)일 경우에만 explanation 배열로 포함
  - explanation_type: 설명의 형식을 명시한다.
    - 기본값은 "text"이며, 설명이 코드로 구성된 경우 "code"로 설정한다.
    - explanation이 없으면 null이다.
    - 예시: "explanation_type": "code"
  - option: 보기 4개 (문자열 배열, 보기 간 중복 없이 의미 구분이 명확해야 함)
  - answer: 정답 번호
    -1~4 중 하나, 문자열로 작성. 예: "2"
    -논리적으로 문제를 풀었을 때 제일 타당한 실제 해답이어야 한다.
  - comment: 해설 (최소 3문장 이상. 정답의 이유와 오답의 구분 근거를 반드시 포함)

3. 반드시 JSON 배열만 응답하라. JSON 외의 주석, 설명, 자연어 문장은 절대 포함하지 마라.

4. 예시는 다음과 같다:

[
  {{
    "type": "TYPE_CHOICE",
    "question": "다음 중 객체 지향 프로그래밍(OOP)의 주요 특징이 아닌 것은 무엇인가?",
    "explanation_type": null,
    "explanation": null,
    "option": ["캡슐화", "상속", "다형성", "구조적 프로그래밍"],
    "answer": "4",
    "comment": "객체 지향 프로그래밍(OOP)은 객체 단위로 프로그램을 구조화하는 방식입니다. 주요 특징은 캡슐화, 상속, 다형성으로 유지보수성과 재사용성이 높습니다. 반면 구조적 프로그래밍은 절차 중심의 프로그래밍 패러다임으로 객체지향의 특징은 아닙니다."
  }},
  {{
    "type": "TYPE_CHOICE",
    "question": "다음 설명에 해당하는 소프트웨어 구성 요소는 무엇인가?",
    "explanation_type": "text",
    "explanation": ["상호 독립적으로 작동하며 유지 보수성을 높인다.", "각기 다른 기능을 수행하는 코드의 그룹이다.", "재사용이 용이하여 개발 속도를 향상시킬 수 있다."],
    "option": ["함수", "클래스", "모듈", "프레임워크"],
    "answer": "3",
    "comment": "모듈은 관련 기능을 묶어 독립적인 코드 단위로 구성되며, 재사용성과 유지보수성이 뛰어납니다. 클래스나 함수는 모듈 안에 포함될 수 있으며, 프레임워크는 구조적 가이드 역할을 합니다. 모듈은 특히 다양한 곳에서 재활용할 수 있는 기능 단위입니다."
  }},
  {{
    "type": "TYPE_CHOICE",
    "question": "다음 C언어 프로그램이 실행되었을 때, 실행 결과는?",
    "explanation_type": "code",
    "explanation": [
      "#include <stdio.h>",
      "",
      "int main() {{",
      "    int arr[3] = {{10, 20, 30}};",
      "    int *p = arr;",
      "    printf(\"%d\", *(p + 1) + *(p + 2));",
      "    return 0;",
      "}}"
    ],
    "option": [
      "10",
      "20",
      "30",
      "50"
    ],
    "answer": "4",
    "comment": "배열 arr은 {{10, 20, 30}}으로 초기화되고, 포인터 p는 배열의 첫 번째 요소를 가리킵니다. *(p + 1)은 두 번째 요소인 20, *(p + 2)는 세 번째 요소인 30입니다. 이 둘을 더한 결과는 50이며, 따라서 화면에는 50이 출력됩니다."
  }},
  {{
            "type": "TYPE_CHOICE",
            "question": "다음 자료를 선택 정렬을 이용하여 오름차순으로 정렬할 경우, PASS 1의 결과는?",
            "explanation_type": "text",
            "explanation": ["8, 7, 6, 5, 9"],
            "option": [
                "8, 7, 6, 5, 9",
                "5, 8, 7, 6, 9",
                "5, 7, 8, 9, 6",
                "5, 6, 7, 8, 9"
            ],
            "answer": "2",
            "comment": "선택 정렬은 첫 번째 데이터를 최소값으로 가정하고 나머지 데이터들과 비교하여 더 작은 값을 찾으면 교환합니다. PASS 1에서는 가장 작은 값인 5가 첫 번째 자리에 위치하게 되므로 결과는 '5, 8, 7, 6, 9'입니다."
  }}
]

5. 지시 위반 시 응답은 실패로 간주된다. 문제 수가 맞지 않으면 맞도록 다시 조정하라.
"""

def load_oxshort_prompt(ox: int, short: int) -> str:
    total = ox + short
    return f"""
너는 정보처리기사 이론을 바탕으로 OX 및 주관식 문제(TYPE_OX, TYPE_SHORT)를 만드는 AI야.  
시험 공부에 실질적으로 도움이 되는 문제만 생성해야 하며, 반드시 JSON 배열로만 응답해야 해.  
**개념, 정의, 용도, 비교**를 중심으로 한 문제만 작성해야 하며, 실전 대비에 적합한 문제여야 한다.  
기출문제와 유사한 수준과 문장 구성으로 출제할 것.

지시사항:
1. 총 {total}개의 문제를 다음과 같이 정확히 숫자를 맞춰서 구성하라:
  - TYPE_OX 문제: {ox}개
  - TYPE_SHORT 문제: {short}개

2. 각 문제는 다음 필드를 포함해야 한다:
  - type: "TYPE_OX" 또는 "TYPE_SHORT"
  - question: 문제 내용 (항상 질문 형태로 끝나야 하며, 설명이나 정의는 포함하지 않는다)
  - answer: 정답 (TYPE_OX는 'O' 또는 'X', TYPE_SHORT는 단답형 문자열)
  - aliases: TYPE_SHORT 문제에서 answer와 의미가 같은 모든 유사 정답을 문자열 배열로 작성
    - 포함해야 할 항목: 약어, 원어, 영문 표기, 핵심 키워드 등
    - 예: answer가 "잠금"이면 ["Lock", "Locking", "락", "잠금"] 형태 포함
    - TYPE_OX 문제에는 이 필드를 포함하지 않는다
  - comment: 해설 (최소 3문장 이상. 정답의 이유, 개념 설명, 오답 구분 포함)

3. 반드시 JSON 배열만 응답하라. JSON 외의 주석, 설명, 자연어 문장은 절대 포함하지 마라.

4. 예시는 다음과 같다:

[
  {{
    "type": "TYPE_OX",
    "question": "OS에서 프로세스 상태 전이 중 'Ready' 상태에서는 'Blocked'로 바로 전이될 수 없다.",
    "answer": "O",
    "comment": "'Ready' 상태는 CPU 할당을 기다리는 상태이고, 'Blocked' 상태는 입출력 완료 등 외부 자원을 기다리는 상태입니다. 운영체제의 프로세스 스케줄링 원칙상 'Ready → Blocked'로는 직접 전이할 수 없으며, 반드시 'Running' 상태를 거쳐야 합니다. 즉, 프로세스는 CPU를 사용 중일 때 입출력 대기로 인해 Blocked 상태로 전이되는 것이 일반적입니다."
  }},
  {{
    "type": "TYPE_SHORT",
    "question": "CPU가 하나의 프로그램 명령어를 실행하는 과정은 무엇인가?",
    "answer": "명령어 사이클",
    "aliases": ["instruction cycle", "명령 사이클", "명령어사이클"],
    "comment": "명령어 사이클은 CPU가 명령어를 처리하기 위해 수행하는 인출, 해독, 실행, 저장의 4단계 절차를 의미합니다. 이 개념은 컴퓨터 구조 이해의 핵심입니다. Instruction Cycle은 해당 개념의 영어 표현입니다."
  }}
]

5. 지시 위반 시 응답은 실패로 간주된다. 문제 수가 맞지 않으면 맞도록 다시 조정하라.
"""
