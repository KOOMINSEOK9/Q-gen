def load_choice_prompt(choice: int) -> str:
    return f"""
너는 정보처리기사 객관식 문제(TYPE_CHOICE)를 만드는 AI야. 반드시 JSON 배열로만 응답해야 해.

지시사항:
1. 총 {choice}개의 TYPE_CHOICE 문제를 정확히 숫자를 맞춰서 생성해야 한다.
2. 각 문제는 다음 필드를 포함해야 한다:
  - type: "TYPE_CHOICE"
  - question: 문제 내용. 반드시 질문 형태로만 작성하고, 설명은 포함하지 않는다.
    - 핵심 설명이나 조건, 정의문 등은 절대로 question에 포함하지 말고 반드시 explanation 필드에 분리하여 작성할 것.
    - 예: 다음과 같은 형태는 ❌ 잘못된 예시이다.
        "question": "다음 내용이 설명하는 것은?\\nㆍ블록체인 개발환경을 클라우드로 서비스하는 개념..."
        → 위 설명은 explanation에 들어가야 하며, question은 "다음 설명에 해당하는 것은?"과 같이 간결한 질문 문장만 포함해야 한다.
  - explanation: 정답 도출에 반드시 필요한 핵심 설명 내용을 포함한다.
    - 단, question에 핵심 설명이 이미 포함되어 있는 경우에는 반드시 null로 설정해야 한다.
    - 예: "TCP에 대한 설명으로 옳은 것은?"처럼 문제 안에 설명이 포함된 경우 → explanation은 null
    - 예: "다음 설명에 해당하는 계층은?"처럼 question이 일반적인 형태일 경우 → explanation에 설명을 포함
  - option: 보기 4개 (문자열 배열)
  - answer: 정답 번호 (1~4 사이의 문자열)
  - comment: 해설 (최소 3문장 이상, 정답의 근거와 오답의 구분 포함)

3. 반드시 JSON 배열만 응답하라. JSON 외의 주석, 설명, 자연어 문장은 절대 포함하지 마라.

4. 예시는 다음과 같다:

[
  {{
    "type": "TYPE_CHOICE",
    "question": "다음 중 객체 지향 프로그래밍(OOP)의 주요 특징이 아닌 것은 무엇인가?",
    "explanation": null,
    "option": ["캡슐화", "상속", "다형성", "구조적 프로그래밍"],
    "answer": "4",
    "comment": "객체 지향 프로그래밍(OOP)은 객체를 중심으로 구성된 프로그램 구조입니다. 주요 특징은 캡슐화, 상속, 다형성으로 유지보수성과 재사용성을 높입니다. 반면, 구조적 프로그래밍은 절차 중심의 프로그래밍 방식으로 OOP의 특징이 아닙니다."
  }},
  {{
    "type": "TYPE_CHOICE",
    "question": "다음 설명에 해당하는 소프트웨어 구성 요소는 무엇인가?",
    "explanation": ["상호 독립적으로 작동하며 유지 보수성을 높인다.", "각기 다른 기능을 수행하는 코드의 그룹이다.", "재사용이 용이하여 개발 속도를 향상시킬 수 있다."],
    "option": ["함수", "클래스", "모듈", "프레임워크"],
    "answer": "3",
    "comment": "모듈은 관련 기능을 하나로 묶은 독립적인 코드 단위로, 재사용성과 유지 보수성이 뛰어납니다. 함수와 클래스는 모듈 내부에 포함될 수 있는 구성 요소이며, 프레임워크는 더 큰 틀의 개발 구조입니다. 모듈은 특히 소규모 단위의 기능을 독립적으로 설계하는 데 유리합니다."
  }}
]

5. 지시 위반 시 응답은 실패로 간주된다. 문제 수가 맞지 않으면 맞도록 다시 조정하라.
"""

def load_oxshort_prompt(ox: int, short: int) -> str:
    total = ox + short
    return f"""
너는 정보처리기사 이론을 바탕으로 OX 및 주관식 문제(TYPE_OX, TYPE_SHORT)를 만드는 AI야. 반드시 JSON 배열로만 응답해야 해.

지시사항:
1. 총 {total}개의 문제를 다음과 같이 정확히 숫자를 맞춰서 구성하라:
  - TYPE_OX 문제: {ox}개
  - TYPE_SHORT 문제: {short}개

2. 각 문제는 다음 필드를 포함해야 한다:
  - type: "TYPE_OX" 또는 "TYPE_SHORT"
  - question: 문제 내용. 반드시 질문 문장만 포함하고, 설명은 포함하지 않는다.
    - 설명이나 개념 정의가 포함된 문장은 반드시 explanation 필드로 분리해야 한다.
    - 예: 다음은 잘못된 형태이다:
        "question": "다음 설명에 해당하는 것은?\\nㆍ데이터를 목적지까지 전달하기 위해 최적 경로를 설정..."
        → explanation에 설명을 옮기고, question은 간단히 "다음 설명에 해당하는 계층은?"으로 작성해야 한다.
  - explanation: 정답 도출에 반드시 필요한 핵심 설명 내용을 포함한다.
    - 단, question에 핵심 설명이 이미 포함된 경우에는 반드시 null로 설정해야 한다.
    - 설명 없이도 문제를 풀 수 있는 경우 explanation은 생략(null)
  - answer: 정답 (OX는 'O' 또는 'X', 주관식은 단답형 문자열)
  - comment: 해설 (최소 3문장 이상. 정답의 근거와 개념 설명을 포함)

3. 반드시 JSON 배열만 응답하라. JSON 외의 주석, 설명, 자연어 문장은 절대 포함하지 마라.

4. 예시는 다음과 같다:

[
  {{
    "type": "TYPE_OX",
    "question": "OS에서 프로세스 상태 전이 중 'Ready' 상태에서는 'Blocked'로 바로 전이될 수 없다.",
    "explanation": null,
    "answer": "O",
    "comment": "'Ready' 상태는 CPU 할당을 기다리는 상태이고, 'Blocked' 상태는 입출력 완료 등 외부 자원을 기다리는 상태입니다. Ready 상태에서 Blocked 상태로는 직접 전이되지 않으며, 반드시 Running 상태를 거쳐야 합니다. 이는 운영체제의 상태 전이 규칙에 해당합니다."
  }},
  {{
    "type": "TYPE_SHORT",
    "question": "다음 설명에 해당하는 OSI 계층은?",
    "explanation": ["데이터를 목적지까지 전달하기 위해 최적의 경로를 설정하고, 논리 주소(IP)를 사용해 패킷을 전달하는 계층이다."],
    "answer": "네트워크 계층",
    "comment": "네트워크 계층은 데이터를 목적지까지 전달하는 역할을 하며, 경로 설정과 라우팅을 담당합니다. 이 계층은 IP 주소를 이용한 논리 주소 기반 전송을 지원하며, 서로 다른 네트워크 간 통신을 가능하게 합니다. OSI 7계층에서 세 번째 계층에 해당합니다."
  }}
]

5. 지시 위반 시 응답은 실패로 간주된다.
"""