def load_choice_prompt(choice: int) -> str:
    return f"""
너는 정보처리기사 객관식 문제(TYPE_CHOICE)를 만드는 AI야. 반드시 JSON 배열로만 응답해야 해.

지시사항:
1. 총 {choice}개의 TYPE_CHOICE 문제를 정확히 숫자를 맞춰서 생성해야 한다.
2. 각 문제는 다음 필드를 포함해야 한다:
  - type: "TYPE_CHOICE"
  - question: 문제 내용
  - explantion: 문제 부가 설명(보조 문맥 또는 힌트)
  - option: 보기 4개 (문자열 배열)
  - answer: 정답 번호 (1~4 사이 문자열)
  - comment: 해설 (최소 3문장 이상)
3. 반드시 JSON 배열만 응답하라. JSON 외의 주석, 설명, 자연어 문장은 절대 포함하지 마라.
4. 예시는 다음과 같다:

[
  {{
    "type":"TYPE_CHOICE",
    "question": "다음 중 객체 지향 프로그래밍(OOP)의 주요 특징이 아닌 것은 무엇인가?",
    "explanation": null,
    "option": ["캡슐화", "상속", "다형성", "구조적 프로그래밍"],
    "answer": "4",
    "comment": "객체 지향 프로그래밍(OOP)은 프로그램을 객체라는 단위로 나누고, 각 객체가 책임을 가지는 구조입니다. 주요 특징으로는 '캡슐화', '상속', '다형성'이 있으며, 이는 재사용성과 확장성, 유지보수성을 높여줍니다. 반면 '구조적 프로그래밍'은 함수와 절차 중심의 방식으로, 절차지향 언어에서 주로 사용하는 개념이며 객체 지향의 특징이 아닙니다."
  }},
  {{
   "type":"TYPE_CHOICE",
    "question": "다음과 같은 특징을 가진 소프트웨어 구성 요소는 무엇인가?",
    "explanation": ["상호 독립적으로 작동하며 유지 보수성을 높인다", "각기 다른 기능을 수행하는 프로그램 코드의 그룹이다", "재사용이 용이하여 개발 속도를 향상시킬 수 있다."],
    "option": ["함수", "클래스", "모듈", "프레임워크"],
    "answer": "3",
    "comment": "모듈(Module)은 기능 단위로 코드를 분리하여 독립적으로 관리하고 재사용할 수 있는 코드 집합입니다. 함수나 클래스는 모듈 내부에 포함될 수 있는 작은 단위이고, 프레임워크는 더 큰 구조로서 전체 개발 방식에 영향을 줍니다. 모듈은 특히 유지 보수성과 개발 효율성을 높이는 데 중요한 역할을 합니다."
  }}
]

5. 지시 위반 시 응답은 실패로 간주된다. 문제 수가 맞지 않으면 맞도록 다시 조정하라.
"""

def load_oxshort_prompt(ox: int, short: int) -> str:
    total = ox + short
    return f"""
너는 정보처리기사 이론을 바탕으로 OX 및 주관식 문제(TYPE_OX, TYPE_SHORT)를 만드는 AI야. 반드시 JSON 배열로만 응답해야 해.

지시사항:
1. 총 {total}개의 문제를 다음과 같이 정확히 숫자를 맞춰서 구성하라:
  - TYPE_OX 문제: {ox}개
  - TYPE_SHORT 문제: {short}개
2. 각 문제는 다음 필드를 포함해야 한다:
  - type: "TYPE_OX" 또는 "TYPE_SHORT"
  - question: 문제 내용
  - answer: 정답 (OX는 'O' 또는 'X', 주관식은 단답형 문자열)
  - comment: 해설 (최소 3문장 이상)
3. 반드시 JSON 배열만 응답하라. JSON 외의 주석, 설명, 자연어 문장은 절대 포함하지 마라.
4. 예시는 다음과 같다:

[
  {{
    "type":"TYPE_OX",
    "question": "OS에서 프로세스 상태 전이 중 'Ready' 상태에서는 'Blocked'로 바로 전이될 수 없다.",
    "answer": "O",
    "comment": "'Ready' 상태는 CPU 할당을 기다리는 상태이고, 'Blocked' 상태는 입출력(I/O) 완료 등 외부 자원을 기다리는 상태입니다. 운영체제의 프로세스 스케줄링 원칙상 'Ready → Blocked'로는 직접 전이할 수 없으며, 반드시 'Running' 상태를 거쳐야 합니다. 즉, 프로세스는 CPU를 사용 중일 때 입출력 대기로 인해 Blocked 상태로 전이되는 것이 일반적입니다."
  }},
  {{
    "type":"TYPE_SHORT",
    "question": "CPU가 하나의 프로그램 명령어를 실행하는 과정은 무엇인가?",
    "answer": "명령어 사이클",
    "comment": "명령어 사이클(Instruction Cycle)은 CPU가 하나의 명령어를 처리하기 위해 수행하는 일련의 단계입니다. 일반적으로 '인출(Fetch)', '해독(Decode)', '실행(Execute)', '결과 저장(Store)'의 4단계로 구성됩니다. 이 과정을 반복적으로 수행하여 프로그램 명령을 순차적으로 처리합니다. 명령어 사이클은 컴퓨터의 기본 작동 원리를 이해하는 데 핵심적인 개념입니다."
  }}
]

5. 지시 위반 시 응답은 실패로 간주된다.
"""
